package analisis;
// importaciones si fuese necesario
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.lang.Math;

//parser (codigo accesible usando punto)  p.variable
parser code
{:
    public LinkedList<Errores> listaErrores = new LinkedList<Errores>();
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores(
            "Sintactico Recuperable",
            "No se esperaba el componente "+s.value,
            s.left,
            s.right
        ));
    }
    
    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores(
            "Sintactico No Recuperable",
            "No se esperaba el componente "+s.value,
            s.left,
            s.right
        ));
    }
:}

// codigo interno de cup
action code
{:
    String codigoUsr="";
:}

terminal String CADENA, NUMEROS;
terminal LLAVE1, LLAVE2, FINCADENA, TKIMP, TKROUND, TKEVALUAR, TKLENGTH;
terminal MULT, DIV, PAR1, PAR2, MAS, MENOS, UMENOS;

nonterminal String INICIO;
nonterminal INSTRUCCIONES, INSTRUCCION;
nonterminal EVALUAR, IMPRIMIR;
nonterminal Double EXPRESION, ROUND, LENGTH;

precedence left MAS, MENOS;
precedence left MULT, DIV;
precedence left UMENOS;

start with INICIO;

INICIO ::= INSTRUCCIONES    {:  RESULT=codigoUsr;   :}
;

INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES
                | INSTRUCCION
                
;

INSTRUCCION ::= EVALUAR
              | IMPRIMIR
              | error FINCADENA
;

EVALUAR ::= TKEVALUAR LLAVE1 EXPRESION:e LLAVE2 FINCADENA {:  codigoUsr+=e+"\n";   :}
;

IMPRIMIR ::= TKIMP LLAVE1 CADENA:c LLAVE2 FINCADENA {:  codigoUsr+=c+"\n";   :}
;

EXPRESION ::= MENOS EXPRESION:a             {:    RESULT=a*-1;    :}%prec UMENOS
            | EXPRESION:a MAS EXPRESION:b   {:    RESULT=a+b;     :}
            | EXPRESION:a MENOS EXPRESION:b {:    RESULT=a-b;     :}
            | EXPRESION:a MULT EXPRESION:b  {:    RESULT=a*b;     :}
            | EXPRESION:a DIV EXPRESION:b   {:    RESULT=a/b;     :}
            | NUMEROS:n                     {:    RESULT=new Double(n);   :}
            | PAR1 EXPRESION:e PAR2         {:    RESULT=e;   :}
            | ROUND:r                       {:    RESULT=r;   :}
            | LENGTH:r                       {:    RESULT=r;   :}
;

ROUND ::= TKROUND PAR1 EXPRESION:e PAR2     {:    RESULT = new Double(Math.round(e));    :}
;

LENGTH ::= TKLENGTH PAR1 CADENA:c PAR2      {:    RESULT = new Double(c.length());       :}
;